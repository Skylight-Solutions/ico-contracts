{
  "contractName": "ICollectCoinIco",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investor",
          "type": "address"
        }
      ],
      "name": "tokenAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_walletLockDate",
          "type": "uint256"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TimeLockedWalletFactory",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setWalletFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOwner",
          "type": "address"
        }
      ],
      "name": "setTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum ICollectCoinIco.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFull",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMinimumGoalReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "reached",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInvestors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletLockDate\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum ICollectCoinIco.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinimumGoalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"reached\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimeLockedWalletFactory\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyTokens(address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE***\",\"params\":{\"_beneficiary\":\"Address performing the token purchase\"}},\"finalize(uint256)\":{\"params\":{\"_walletLockDate\":\"The time from when the locking calculations for the investor's time locked tokens begin to count\"}},\"isMinimumGoalReached()\":{\"returns\":{\"reached\":\"== true if the crowdsale has raised enough money to be a successful.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalize(uint256)\":{\"notice\":\"Finalize a succcesful crowdsale. The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\"},\"getState()\":{\"notice\":\"state machine management. We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\"},\"isFull()\":{\"notice\":\"Check if the current crowdsale is full and we can no longer sell any tokens.\"},\"setWalletFactory(address)\":{\"notice\":\"Allow to (re)set finalize agent. Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\"},\"tokenAmountOf(address)\":{\"notice\":\"How much tokens this crowdsale has credited for each investor address \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/eule/Projects/ico-contracts/ethereum/ico/contracts/ICollectCoinIco.sol\":\"ICollectCoinIco\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/eule/Projects/ico-contracts/ethereum/ico/contracts/CollectCoin.sol\":{\"keccak256\":\"0x4812a283343daa2baaf5dec59778296f03efd00bb4424acabd5ad0bc5adc6ec5\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://7a0fe570689c08b6285dee6b7a78ed42bbab11b46c545c37742e5d39d724a6e2\",\"dweb:/ipfs/QmReem7yMomrManhhfAQdHzmWafqVxodegdT3QKAapAW3S\"]},\"/home/eule/Projects/ico-contracts/ethereum/ico/contracts/ICollectCoinIco.sol\":{\"keccak256\":\"0xeafd526cf5d3371995ee66aabbafb0e53fc329ef8f12aa5689b595d1d0805c8c\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b5b0fc54653dfb5a6b5d65cd3461d0cfebcd6e6e9f9b2b16f06026f7929fa03e\",\"dweb:/ipfs/QmXX2DZb5zg8gHcmoEFHjQpR5yx5DAnXhoKhZAhvcRwW5D\"]},\"/home/eule/Projects/ico-contracts/ethereum/ico/contracts/PeriodicTimeLockedMonoWallet.sol\":{\"keccak256\":\"0x35bc1c16a51103d07c4144e07c27a6387ab4eb8df353e8f0c1bd00b0e199f94e\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://0bb42f5ff3921112ea3b68d1183ab231c4ff0a7980b6926b2645b3db67dc69aa\",\"dweb:/ipfs/QmSdvpNntyNfLjdAfwSvmJRUd1s6wHAAAHnLdSba6cA5xn\"]},\"/home/eule/Projects/ico-contracts/ethereum/ico/contracts/PeriodicTimeLockedWallet.sol\":{\"keccak256\":\"0xa3b59397605baabccc224064fab5407a35cf67310e607545d31b2ce9a364917c\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://564a4c3477dd1988132602a8fce2fab32056ef3c712e8e7b4500a1aaadb99f5c\",\"dweb:/ipfs/QmaeK89KxdmNpzgJ1pLqLKMv7Ny439XQ9qo8ec5wYSVrE3\"]},\"/home/eule/Projects/ico-contracts/ethereum/ico/contracts/TimeLockedWalletFactory.sol\":{\"keccak256\":\"0x37fe7a10e49c226e4a7a159a85c006feea04bf2c2f6f4e41ce95382b91c825bf\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://9845df17be58960e8f9a0b281af4b6da9f6d1dde5b72de2ef386192bef81849f\",\"dweb:/ipfs/QmP7GbJ2Wkto8kScWuCUJEBN8DjRKPUrZEaETmv2VYuRuv\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5ff16b336ce8f906478d5f2eecc6435e00833bdc0b92f6b209cf9e92cb5b2b7\",\"dweb:/ipfs/QmRD1rAZEqQ73C33cdA3QoUyBDMEWnNKNMc6PNkAZWHeQQ\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45b1f9043c0fb450272f20ed19ef633fcba1b129d602651a856dfae1a2243a2c\",\"dweb:/ipfs/QmUTSQiDikkcNtTtyDpkEwCM5ztVUUh9c1inBukn6HC5Vr\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f\",\"dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4c3df1a7ca104b633a7d81c6c6f5192367d150cd5a32cba81f7f27012729013\",\"dweb:/ipfs/QmSim72e3ZVsfgZt8UceCvbiSuMRHR6WDsiamqNzZahGSY\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc2bfdea0d2562c76fb3c4cf70a86c6ba25c5a30e8f8515c95aafdf8383f8395\",\"dweb:/ipfs/QmTbFya18786ckJfLYUoWau9jBTKfmWnWm5XSViWvB7PXN\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f9529d3d365e8415155cee11394e0f7c0de2152b601b7e77508fce16cb4a509\",\"dweb:/ipfs/QmVhbcLVsAzvqfjsdLwy25XMjgVJm7Z3w2JCNiNbZF2GHT\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.6;\n\nimport \"./TimeLockedWalletFactory.sol\";\n\ninterface ICollectCoinIco {\n\n     /** How much tokens this crowdsale has credited for each investor address */\n    function tokenAmountOf(address _investor) external view returns (uint256);\n\n    /** State machine\n    *\n    * - Preparing: All contract initialization calls and variables have not been set yet\n    * - Prefunding: We have not passed start time yet\n    * - Funding: Active crowdsale\n    * - Success: Minimum funding goal reached\n    * - Failure: Minimum funding goal not reached before ending time\n    * - Finalized: The finalized has been called and succesfully executed\n    * - Refunding: Refunds are loaded on the contract for reclaim.\n    */\n    enum State{ Unknown, Preparing, Funding, Success, Failure, Finalized, Refunding }\n       \n    \n    /**\n    * Finalize a succcesful crowdsale.\n    *\n    * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n    * @param _walletLockDate The time from when the locking calculations for the investor's time locked tokens begin to count\n    */\n    function finalize(uint256 _walletLockDate) external;\n\n    /**\n    * Allow to (re)set finalize agent.\n    *\n    * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n    */\n    //function setFinalizeAgent(IFinalizeAgent addr) external;\n    \n    function setWalletFactory(TimeLockedWalletFactory addr) external;\n    function setTokenOwner(address _tokenOwner) external;\n\n    /**\n    * state machine management.\n    *\n    * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n    */\n    function getState() external returns (State);\n\n     /**\n    * Check if the current crowdsale is full and we can no longer sell any tokens.\n    */\n    function isFull() external view returns (bool);\n\n    /**\n    * @return reached == true if the crowdsale has raised enough money to be a successful.\n    */\n    function isMinimumGoalReached() external view returns (bool reached);\n\n    function getAllInvestors() external returns (address[] memory);\n\n    /**\n    * @dev low level token purchase ***DO NOT OVERRIDE***\n    * @param _beneficiary Address performing the token purchase\n    */\n    function buyTokens(address _beneficiary) external payable;\n}",
  "sourcePath": "/home/eule/Projects/ico-contracts/ethereum/ico/contracts/ICollectCoinIco.sol",
  "ast": {
    "absolutePath": "/home/eule/Projects/ico-contracts/ethereum/ico/contracts/ICollectCoinIco.sol",
    "exportedSymbols": {
      "CollectCoin": [
        49
      ],
      "Context": [
        3332
      ],
      "ERC20": [
        3206
      ],
      "ICollectCoinIco": [
        1117
      ],
      "IERC20": [
        3284
      ],
      "IERC20Metadata": [
        3309
      ],
      "Ownable": [
        2699
      ],
      "PeriodicTimeLockedMonoWallet": [
        2023
      ],
      "PeriodicTimeLockedWallet": [
        2323
      ],
      "SafeMath": [
        3644
      ],
      "TimeLockedWalletFactory": [
        2543
      ]
    },
    "id": 1118,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1050,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:23:4"
      },
      {
        "absolutePath": "/home/eule/Projects/ico-contracts/ethereum/ico/contracts/TimeLockedWalletFactory.sol",
        "file": "./TimeLockedWalletFactory.sol",
        "id": 1051,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1118,
        "sourceUnit": 2544,
        "src": "64:39:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 1117,
        "linearizedBaseContracts": [
          1117
        ],
        "name": "ICollectCoinIco",
        "nameLocation": "115:15:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 1052,
              "nodeType": "StructuredDocumentation",
              "src": "139:76:4",
              "text": "How much tokens this crowdsale has credited for each investor address "
            },
            "functionSelector": "97b150ca",
            "id": 1059,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "tokenAmountOf",
            "nameLocation": "229:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1055,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1054,
                  "mutability": "mutable",
                  "name": "_investor",
                  "nameLocation": "251:9:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1059,
                  "src": "243:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1053,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "243:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "242:19:4"
            },
            "returnParameters": {
              "id": 1058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1057,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1059,
                  "src": "285:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1056,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "285:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "284:9:4"
            },
            "scope": 1117,
            "src": "220:74:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "ICollectCoinIco.State",
            "id": 1067,
            "members": [
              {
                "id": 1060,
                "name": "Unknown",
                "nameLocation": "780:7:4",
                "nodeType": "EnumValue",
                "src": "780:7:4"
              },
              {
                "id": 1061,
                "name": "Preparing",
                "nameLocation": "789:9:4",
                "nodeType": "EnumValue",
                "src": "789:9:4"
              },
              {
                "id": 1062,
                "name": "Funding",
                "nameLocation": "800:7:4",
                "nodeType": "EnumValue",
                "src": "800:7:4"
              },
              {
                "id": 1063,
                "name": "Success",
                "nameLocation": "809:7:4",
                "nodeType": "EnumValue",
                "src": "809:7:4"
              },
              {
                "id": 1064,
                "name": "Failure",
                "nameLocation": "818:7:4",
                "nodeType": "EnumValue",
                "src": "818:7:4"
              },
              {
                "id": 1065,
                "name": "Finalized",
                "nameLocation": "827:9:4",
                "nodeType": "EnumValue",
                "src": "827:9:4"
              },
              {
                "id": 1066,
                "name": "Refunding",
                "nameLocation": "838:9:4",
                "nodeType": "EnumValue",
                "src": "838:9:4"
              }
            ],
            "name": "State",
            "nameLocation": "773:5:4",
            "nodeType": "EnumDefinition",
            "src": "768:81:4"
          },
          {
            "documentation": {
              "id": 1068,
              "nodeType": "StructuredDocumentation",
              "src": "867:294:4",
              "text": " Finalize a succcesful crowdsale.\n The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n @param _walletLockDate The time from when the locking calculations for the investor's time locked tokens begin to count"
            },
            "functionSelector": "05261aea",
            "id": 1073,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nameLocation": "1175:8:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1070,
                  "mutability": "mutable",
                  "name": "_walletLockDate",
                  "nameLocation": "1192:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1073,
                  "src": "1184:23:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1069,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1184:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1183:25:4"
            },
            "returnParameters": {
              "id": 1072,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1217:0:4"
            },
            "scope": 1117,
            "src": "1166:52:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1074,
              "nodeType": "StructuredDocumentation",
              "src": "1224:155:4",
              "text": " Allow to (re)set finalize agent.\n Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes."
            },
            "functionSelector": "7ebf879c",
            "id": 1080,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWalletFactory",
            "nameLocation": "1461:16:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1078,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1077,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "1502:4:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1080,
                  "src": "1478:28:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TimeLockedWalletFactory_$2543",
                    "typeString": "contract TimeLockedWalletFactory"
                  },
                  "typeName": {
                    "id": 1076,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1075,
                      "name": "TimeLockedWalletFactory",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2543,
                      "src": "1478:23:4"
                    },
                    "referencedDeclaration": 2543,
                    "src": "1478:23:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TimeLockedWalletFactory_$2543",
                      "typeString": "contract TimeLockedWalletFactory"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1477:30:4"
            },
            "returnParameters": {
              "id": 1079,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1516:0:4"
            },
            "scope": 1117,
            "src": "1452:65:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "18e02bd9",
            "id": 1085,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenOwner",
            "nameLocation": "1531:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1083,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1082,
                  "mutability": "mutable",
                  "name": "_tokenOwner",
                  "nameLocation": "1553:11:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "1545:19:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1081,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1545:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1544:21:4"
            },
            "returnParameters": {
              "id": 1084,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1574:0:4"
            },
            "scope": 1117,
            "src": "1522:53:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1086,
              "nodeType": "StructuredDocumentation",
              "src": "1581:171:4",
              "text": " state machine management.\n We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale."
            },
            "functionSelector": "1865c57d",
            "id": 1092,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getState",
            "nameLocation": "1766:8:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1087,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1774:2:4"
            },
            "returnParameters": {
              "id": 1091,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1090,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1092,
                  "src": "1795:5:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$1067",
                    "typeString": "enum ICollectCoinIco.State"
                  },
                  "typeName": {
                    "id": 1089,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1088,
                      "name": "State",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1067,
                      "src": "1795:5:4"
                    },
                    "referencedDeclaration": 1067,
                    "src": "1795:5:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$1067",
                      "typeString": "enum ICollectCoinIco.State"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1794:7:4"
            },
            "scope": 1117,
            "src": "1757:45:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1093,
              "nodeType": "StructuredDocumentation",
              "src": "1809:93:4",
              "text": " Check if the current crowdsale is full and we can no longer sell any tokens."
            },
            "functionSelector": "babd3d9a",
            "id": 1098,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isFull",
            "nameLocation": "1916:6:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1094,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1922:2:4"
            },
            "returnParameters": {
              "id": 1097,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1096,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1098,
                  "src": "1948:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1095,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1948:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1947:6:4"
            },
            "scope": 1117,
            "src": "1907:47:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1099,
              "nodeType": "StructuredDocumentation",
              "src": "1960:101:4",
              "text": " @return reached == true if the crowdsale has raised enough money to be a successful."
            },
            "functionSelector": "7c2e08a3",
            "id": 1104,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isMinimumGoalReached",
            "nameLocation": "2075:20:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1100,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2095:2:4"
            },
            "returnParameters": {
              "id": 1103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1102,
                  "mutability": "mutable",
                  "name": "reached",
                  "nameLocation": "2126:7:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1104,
                  "src": "2121:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1101,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2121:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2120:14:4"
            },
            "scope": 1117,
            "src": "2066:69:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "d0a2f2c4",
            "id": 1110,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAllInvestors",
            "nameLocation": "2150:15:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1105,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2165:2:4"
            },
            "returnParameters": {
              "id": 1109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1108,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1110,
                  "src": "2186:16:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1106,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2186:7:4",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1107,
                    "nodeType": "ArrayTypeName",
                    "src": "2186:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2185:18:4"
            },
            "scope": 1117,
            "src": "2141:63:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1111,
              "nodeType": "StructuredDocumentation",
              "src": "2210:132:4",
              "text": " @dev low level token purchase ***DO NOT OVERRIDE***\n @param _beneficiary Address performing the token purchase"
            },
            "functionSelector": "ec8ac4d8",
            "id": 1116,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "buyTokens",
            "nameLocation": "2356:9:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1113,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "2374:12:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1116,
                  "src": "2366:20:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1112,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2366:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2365:22:4"
            },
            "returnParameters": {
              "id": 1115,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2404:0:4"
            },
            "scope": 1117,
            "src": "2347:58:4",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1118,
        "src": "105:2302:4",
        "usedErrors": []
      }
    ],
    "src": "39:2368:4"
  },
  "legacyAST": {
    "absolutePath": "/home/eule/Projects/ico-contracts/ethereum/ico/contracts/ICollectCoinIco.sol",
    "exportedSymbols": {
      "CollectCoin": [
        49
      ],
      "Context": [
        3332
      ],
      "ERC20": [
        3206
      ],
      "ICollectCoinIco": [
        1117
      ],
      "IERC20": [
        3284
      ],
      "IERC20Metadata": [
        3309
      ],
      "Ownable": [
        2699
      ],
      "PeriodicTimeLockedMonoWallet": [
        2023
      ],
      "PeriodicTimeLockedWallet": [
        2323
      ],
      "SafeMath": [
        3644
      ],
      "TimeLockedWalletFactory": [
        2543
      ]
    },
    "id": 1118,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1050,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:23:4"
      },
      {
        "absolutePath": "/home/eule/Projects/ico-contracts/ethereum/ico/contracts/TimeLockedWalletFactory.sol",
        "file": "./TimeLockedWalletFactory.sol",
        "id": 1051,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1118,
        "sourceUnit": 2544,
        "src": "64:39:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 1117,
        "linearizedBaseContracts": [
          1117
        ],
        "name": "ICollectCoinIco",
        "nameLocation": "115:15:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 1052,
              "nodeType": "StructuredDocumentation",
              "src": "139:76:4",
              "text": "How much tokens this crowdsale has credited for each investor address "
            },
            "functionSelector": "97b150ca",
            "id": 1059,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "tokenAmountOf",
            "nameLocation": "229:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1055,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1054,
                  "mutability": "mutable",
                  "name": "_investor",
                  "nameLocation": "251:9:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1059,
                  "src": "243:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1053,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "243:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "242:19:4"
            },
            "returnParameters": {
              "id": 1058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1057,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1059,
                  "src": "285:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1056,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "285:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "284:9:4"
            },
            "scope": 1117,
            "src": "220:74:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "canonicalName": "ICollectCoinIco.State",
            "id": 1067,
            "members": [
              {
                "id": 1060,
                "name": "Unknown",
                "nameLocation": "780:7:4",
                "nodeType": "EnumValue",
                "src": "780:7:4"
              },
              {
                "id": 1061,
                "name": "Preparing",
                "nameLocation": "789:9:4",
                "nodeType": "EnumValue",
                "src": "789:9:4"
              },
              {
                "id": 1062,
                "name": "Funding",
                "nameLocation": "800:7:4",
                "nodeType": "EnumValue",
                "src": "800:7:4"
              },
              {
                "id": 1063,
                "name": "Success",
                "nameLocation": "809:7:4",
                "nodeType": "EnumValue",
                "src": "809:7:4"
              },
              {
                "id": 1064,
                "name": "Failure",
                "nameLocation": "818:7:4",
                "nodeType": "EnumValue",
                "src": "818:7:4"
              },
              {
                "id": 1065,
                "name": "Finalized",
                "nameLocation": "827:9:4",
                "nodeType": "EnumValue",
                "src": "827:9:4"
              },
              {
                "id": 1066,
                "name": "Refunding",
                "nameLocation": "838:9:4",
                "nodeType": "EnumValue",
                "src": "838:9:4"
              }
            ],
            "name": "State",
            "nameLocation": "773:5:4",
            "nodeType": "EnumDefinition",
            "src": "768:81:4"
          },
          {
            "documentation": {
              "id": 1068,
              "nodeType": "StructuredDocumentation",
              "src": "867:294:4",
              "text": " Finalize a succcesful crowdsale.\n The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n @param _walletLockDate The time from when the locking calculations for the investor's time locked tokens begin to count"
            },
            "functionSelector": "05261aea",
            "id": 1073,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nameLocation": "1175:8:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1070,
                  "mutability": "mutable",
                  "name": "_walletLockDate",
                  "nameLocation": "1192:15:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1073,
                  "src": "1184:23:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1069,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1184:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1183:25:4"
            },
            "returnParameters": {
              "id": 1072,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1217:0:4"
            },
            "scope": 1117,
            "src": "1166:52:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1074,
              "nodeType": "StructuredDocumentation",
              "src": "1224:155:4",
              "text": " Allow to (re)set finalize agent.\n Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes."
            },
            "functionSelector": "7ebf879c",
            "id": 1080,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWalletFactory",
            "nameLocation": "1461:16:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1078,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1077,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "1502:4:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1080,
                  "src": "1478:28:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TimeLockedWalletFactory_$2543",
                    "typeString": "contract TimeLockedWalletFactory"
                  },
                  "typeName": {
                    "id": 1076,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1075,
                      "name": "TimeLockedWalletFactory",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2543,
                      "src": "1478:23:4"
                    },
                    "referencedDeclaration": 2543,
                    "src": "1478:23:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TimeLockedWalletFactory_$2543",
                      "typeString": "contract TimeLockedWalletFactory"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1477:30:4"
            },
            "returnParameters": {
              "id": 1079,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1516:0:4"
            },
            "scope": 1117,
            "src": "1452:65:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "18e02bd9",
            "id": 1085,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenOwner",
            "nameLocation": "1531:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1083,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1082,
                  "mutability": "mutable",
                  "name": "_tokenOwner",
                  "nameLocation": "1553:11:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "1545:19:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1081,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1545:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1544:21:4"
            },
            "returnParameters": {
              "id": 1084,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1574:0:4"
            },
            "scope": 1117,
            "src": "1522:53:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1086,
              "nodeType": "StructuredDocumentation",
              "src": "1581:171:4",
              "text": " state machine management.\n We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale."
            },
            "functionSelector": "1865c57d",
            "id": 1092,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getState",
            "nameLocation": "1766:8:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1087,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1774:2:4"
            },
            "returnParameters": {
              "id": 1091,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1090,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1092,
                  "src": "1795:5:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_State_$1067",
                    "typeString": "enum ICollectCoinIco.State"
                  },
                  "typeName": {
                    "id": 1089,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1088,
                      "name": "State",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1067,
                      "src": "1795:5:4"
                    },
                    "referencedDeclaration": 1067,
                    "src": "1795:5:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$1067",
                      "typeString": "enum ICollectCoinIco.State"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1794:7:4"
            },
            "scope": 1117,
            "src": "1757:45:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1093,
              "nodeType": "StructuredDocumentation",
              "src": "1809:93:4",
              "text": " Check if the current crowdsale is full and we can no longer sell any tokens."
            },
            "functionSelector": "babd3d9a",
            "id": 1098,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isFull",
            "nameLocation": "1916:6:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1094,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1922:2:4"
            },
            "returnParameters": {
              "id": 1097,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1096,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1098,
                  "src": "1948:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1095,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1948:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1947:6:4"
            },
            "scope": 1117,
            "src": "1907:47:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1099,
              "nodeType": "StructuredDocumentation",
              "src": "1960:101:4",
              "text": " @return reached == true if the crowdsale has raised enough money to be a successful."
            },
            "functionSelector": "7c2e08a3",
            "id": 1104,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isMinimumGoalReached",
            "nameLocation": "2075:20:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1100,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2095:2:4"
            },
            "returnParameters": {
              "id": 1103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1102,
                  "mutability": "mutable",
                  "name": "reached",
                  "nameLocation": "2126:7:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1104,
                  "src": "2121:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1101,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2121:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2120:14:4"
            },
            "scope": 1117,
            "src": "2066:69:4",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "d0a2f2c4",
            "id": 1110,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAllInvestors",
            "nameLocation": "2150:15:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1105,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2165:2:4"
            },
            "returnParameters": {
              "id": 1109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1108,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1110,
                  "src": "2186:16:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1106,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2186:7:4",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1107,
                    "nodeType": "ArrayTypeName",
                    "src": "2186:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2185:18:4"
            },
            "scope": 1117,
            "src": "2141:63:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1111,
              "nodeType": "StructuredDocumentation",
              "src": "2210:132:4",
              "text": " @dev low level token purchase ***DO NOT OVERRIDE***\n @param _beneficiary Address performing the token purchase"
            },
            "functionSelector": "ec8ac4d8",
            "id": 1116,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "buyTokens",
            "nameLocation": "2356:9:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1113,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "2374:12:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1116,
                  "src": "2366:20:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1112,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2366:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2365:22:4"
            },
            "returnParameters": {
              "id": 1115,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2404:0:4"
            },
            "scope": 1117,
            "src": "2347:58:4",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1118,
        "src": "105:2302:4",
        "usedErrors": []
      }
    ],
    "src": "39:2368:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.6+commit.11564f7e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-10-13T09:59:56.776Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE***",
        "params": {
          "_beneficiary": "Address performing the token purchase"
        }
      },
      "finalize(uint256)": {
        "params": {
          "_walletLockDate": "The time from when the locking calculations for the investor's time locked tokens begin to count"
        }
      },
      "isMinimumGoalReached()": {
        "returns": {
          "reached": "== true if the crowdsale has raised enough money to be a successful."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalize(uint256)": {
        "notice": "Finalize a succcesful crowdsale. The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens."
      },
      "getState()": {
        "notice": "state machine management. We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale."
      },
      "isFull()": {
        "notice": "Check if the current crowdsale is full and we can no longer sell any tokens."
      },
      "setWalletFactory(address)": {
        "notice": "Allow to (re)set finalize agent. Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes."
      },
      "tokenAmountOf(address)": {
        "notice": "How much tokens this crowdsale has credited for each investor address "
      }
    },
    "version": 1
  }
}